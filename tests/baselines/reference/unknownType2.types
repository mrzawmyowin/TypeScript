=== tests/cases/conformance/types/unknown/unknownType2.ts ===
type isUnknown<T> = unknown extends T ? true : false;
>isUnknown : isUnknown<T>
>true : true
>false : false

type isTrue<T extends true> = T;
>isTrue : T
>true : true

type SomeResponse = 'yes' | 'no' | 'idk';
>SomeResponse : SomeResponse

let validate: (x: unknown) => SomeResponse = x => (x === 'yes' || x === 'no') ? x : 'idk'; // No error
>validate : (x: unknown) => SomeResponse
>x : unknown
>x => (x === 'yes' || x === 'no') ? x : 'idk' : (x: unknown) => "yes" | "no" | "idk"
>x : unknown
>(x === 'yes' || x === 'no') ? x : 'idk' : SomeResponse
>(x === 'yes' || x === 'no') : boolean
>x === 'yes' || x === 'no' : boolean
>x === 'yes' : boolean
>x : unknown
>'yes' : "yes"
>x === 'no' : boolean
>x : unknown
>'no' : "no"
>x : "yes" | "no"
>'idk' : "idk"

const u: unknown = undefined;
>u : unknown
>undefined : undefined

declare const symb: unique symbol;
>symb : unique symbol

if (u === 5) {
>u === 5 : boolean
>u : unknown
>5 : 5

    const y = u.toString(10);
>y : string
>u.toString(10) : string
>u.toString : (radix?: number | undefined) => string
>u : 5
>toString : (radix?: number | undefined) => string
>10 : 10
}

if (u === true || u === false) {
>u === true || u === false : boolean
>u === true : boolean
>u : unknown
>true : true
>u === false : boolean
>u : unknown
>false : false

    const someBool: boolean = u;
>someBool : boolean
>u : boolean
}

if (u === undefined) {
>u === undefined : boolean
>u : unknown
>undefined : undefined

    const undef: undefined = u;
>undef : undefined
>u : undefined
}

if (u === null) {
>u === null : boolean
>u : unknown
>null : null

    const someNull: null = u;
>someNull : null
>null : null
>u : null
}

if (u === symb) {
>u === symb : boolean
>u : unknown
>symb : unique symbol

    const symbolAlias: typeof symb = u;
>symbolAlias : unique symbol
>symb : unique symbol
>u : unique symbol
}

if (!(u === 42)) {
>!(u === 42) : boolean
>(u === 42) : boolean
>u === 42 : boolean
>u : unknown
>42 : 42

    type A = isTrue<isUnknown<typeof u>>
>A : true
>u : unknown
}

if (u !== 42) {
>u !== 42 : boolean
>u : unknown
>42 : 42

    type B = isTrue<isUnknown<typeof u>>
>B : true
>u : unknown
}

if (u == 42) {
>u == 42 : boolean
>u : unknown
>42 : 42

    type C = isTrue<isUnknown<typeof u>>
>C : true
>u : unknown
}

if (u == true) {
>u == true : boolean
>u : unknown
>true : true

    type D = isTrue<isUnknown<typeof u>>
>D : true
>u : unknown
}

if (u == Object) {
>u == Object : boolean
>u : unknown
>Object : ObjectConstructor

    type E = isTrue<isUnknown<typeof u>>
>E : true
>u : unknown
}

declare const aString: string;
>aString : string

declare const aBoolean: boolean;
>aBoolean : boolean

declare const aNumber: number;
>aNumber : number

declare const anObject: object;
>anObject : object

declare const anObjectLiteral: { x: number };
>anObjectLiteral : { x: number; }
>x : number

declare const aUnion: { x: number } | { y: string };
>aUnion : { x: number; } | { y: string; }
>x : number
>y : string

declare const anIntersection: { x: number } & { y: string };
>anIntersection : { x: number; } & { y: string; }
>x : number
>y : string

declare const aFunction: () => number;
>aFunction : () => number

if (u === aString) {
>u === aString : boolean
>u : unknown
>aString : string

    let uString: string = u;
>uString : string
>u : string
}

if (u === aBoolean) {
>u === aBoolean : boolean
>u : unknown
>aBoolean : boolean

    let uString: boolean = u;
>uString : boolean
>u : boolean
}

if (u === aNumber) {
>u === aNumber : boolean
>u : unknown
>aNumber : number

    let uNumber: number = u;
>uNumber : number
>u : number
}

if (u === anObject) {
>u === anObject : boolean
>u : unknown
>anObject : object

    let uObject: object = u;
>uObject : object
>u : object
}

if (u === anObjectLiteral) {
>u === anObjectLiteral : boolean
>u : unknown
>anObjectLiteral : { x: number; }

    let uObjectLiteral: object = u;
>uObjectLiteral : object
>u : object
}

if (u === aUnion) {
>u === aUnion : boolean
>u : unknown
>aUnion : { x: number; } | { y: string; }

    type unionDoesNotNarrow = isTrue<isUnknown<typeof u>>
>unionDoesNotNarrow : true
>u : unknown
}

if (u === anIntersection) {
>u === anIntersection : boolean
>u : unknown
>anIntersection : { x: number; } & { y: string; }

    type intersectionDoesNotNarrow = isTrue<isUnknown<typeof u>>
>intersectionDoesNotNarrow : true
>u : unknown
}

if (u === aFunction) {
>u === aFunction : boolean
>u : unknown
>aFunction : () => number

    let uFunction: object = u;
>uFunction : object
>u : object
}

enum NumberEnum {
>NumberEnum : NumberEnum

    A,
>A : NumberEnum.A

    B,
>B : NumberEnum.B

    C
>C : NumberEnum.C
}

enum StringEnum {
>StringEnum : StringEnum

    A = "A",
>A : StringEnum.A
>"A" : "A"

    B = "B",
>B : StringEnum.B
>"B" : "B"

    C = "C"
>C : StringEnum.C
>"C" : "C"
}

if (u === NumberEnum || u === StringEnum) {
>u === NumberEnum || u === StringEnum : boolean
>u === NumberEnum : boolean
>u : unknown
>NumberEnum : typeof NumberEnum
>u === StringEnum : boolean
>u : unknown
>StringEnum : typeof StringEnum

    let enumObj: object = u;
>enumObj : object
>u : object
}

if(u === NumberEnum.A) {
>u === NumberEnum.A : boolean
>u : unknown
>NumberEnum.A : NumberEnum.A
>NumberEnum : typeof NumberEnum
>A : NumberEnum.A

    let a: NumberEnum.A = u
>a : NumberEnum.A
>NumberEnum : any
>u : NumberEnum.A
}

if(u === StringEnum.B) {
>u === StringEnum.B : boolean
>u : unknown
>StringEnum.B : StringEnum.B
>StringEnum : typeof StringEnum
>B : StringEnum.B

    let b: StringEnum.B = u
>b : StringEnum.B
>StringEnum : any
>u : StringEnum.B
}

