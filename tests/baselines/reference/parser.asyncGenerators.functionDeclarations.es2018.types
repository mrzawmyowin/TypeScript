=== tests/cases/conformance/parser/ecmascript2018/asyncGenerators/functionDeclarationIsOk.ts ===
async function * f1() {
>f1 : () => AsyncIterableIterator<any>
}
=== tests/cases/conformance/parser/ecmascript2018/asyncGenerators/awaitNameIsOk.ts ===
async function * await() {
>await : () => AsyncIterableIterator<any>
}
=== tests/cases/conformance/parser/ecmascript2018/asyncGenerators/yieldNameIsOk.ts ===
async function * yield() {
>yield : () => AsyncIterableIterator<any>
}
=== tests/cases/conformance/parser/ecmascript2018/asyncGenerators/awaitParameterIsError.ts ===
async function * f4(await) {
>f4 : () => any
>await : () => AsyncIterableIterator<any>
}
=== tests/cases/conformance/parser/ecmascript2018/asyncGenerators/yieldParameterIsError.ts ===
async function * f5(yield) {
>f5 : () => any
>yield : () => AsyncIterableIterator<any>
}
=== tests/cases/conformance/parser/ecmascript2018/asyncGenerators/awaitInParameterInitializerIsError.ts ===
async function * f6(a = await 1) {
>f6 : (a?: number) => AsyncIterableIterator<any>
>a : number
>await 1 : 1
>1 : 1
}
=== tests/cases/conformance/parser/ecmascript2018/asyncGenerators/yieldInParameterInitializerIsError.ts ===
async function * f7(a = yield) {
>f7 : (a?: any) => AsyncIterableIterator<any>
>a : any
>yield : any
}
=== tests/cases/conformance/parser/ecmascript2018/asyncGenerators/nestedAsyncGeneratorIsOk.ts ===
async function * f8() {
>f8 : () => AsyncIterableIterator<any>

    async function * g() {
>g : () => AsyncIterableIterator<any>
    }
}
=== tests/cases/conformance/parser/ecmascript2018/asyncGenerators/nestedFunctionDeclarationNamedYieldIsError.ts ===
async function * f9() {
>f9 : () => AsyncIterableIterator<() => void>

    function yield() {
> : () => any
>yield() {    } : any
>() {    } : () => void
    }
}
=== tests/cases/conformance/parser/ecmascript2018/asyncGenerators/nestedFunctionExpressionNamedYieldIsError.ts ===
async function * f10() {
>f10 : () => AsyncIterableIterator<() => void>

    const x = function yield() {
>x : () => any
>function : () => any
>yield() {    } : any
>() {    } : () => void

    };
}
=== tests/cases/conformance/parser/ecmascript2018/asyncGenerators/nestedFunctionDeclarationNamedAwaitIsError.ts ===
async function * f11() {
>f11 : () => AsyncIterableIterator<any>

    function await() {
> : () => any
>await() : any
>() : any
> : any
    }
}
=== tests/cases/conformance/parser/ecmascript2018/asyncGenerators/nestedFunctionExpressionNamedAwaitIsError.ts ===
async function * f12() {
>f12 : () => AsyncIterableIterator<() => void>

    const x = function yield() {
>x : () => any
>function : () => any
>yield() {    } : any
>() {    } : () => void

    };
}
=== tests/cases/conformance/parser/ecmascript2018/asyncGenerators/yieldIsOk.ts ===
async function * f13() {
>f13 : () => AsyncIterableIterator<any>

    yield;
>yield : any
}
=== tests/cases/conformance/parser/ecmascript2018/asyncGenerators/yieldWithValueIsOk.ts ===
async function * f14() {
>f14 : () => AsyncIterableIterator<number>

    yield 1;
>yield 1 : any
>1 : 1
}
=== tests/cases/conformance/parser/ecmascript2018/asyncGenerators/yieldStarMissingValueIsError.ts ===
async function * f15() {
>f15 : () => AsyncIterableIterator<any>

    yield *;
>yield * : any
> : any
}
=== tests/cases/conformance/parser/ecmascript2018/asyncGenerators/yieldStarWithValueIsOk.ts ===
async function * f16() {
>f16 : () => AsyncIterableIterator<any>

    yield * [];
>yield * [] : any
>[] : undefined[]
}
=== tests/cases/conformance/parser/ecmascript2018/asyncGenerators/awaitWithValueIsOk.ts ===
async function * f17() {
>f17 : () => AsyncIterableIterator<any>

    await 1;
>await 1 : 1
>1 : 1
}
=== tests/cases/conformance/parser/ecmascript2018/asyncGenerators/awaitMissingValueIsError.ts ===
async function * f18() {
>f18 : () => AsyncIterableIterator<any>

    await;
>await : any
> : any
}
=== tests/cases/conformance/parser/ecmascript2018/asyncGenerators/awaitAsTypeIsOk.ts ===
interface await {}
async function * f19() {
>f19 : () => AsyncIterableIterator<any>

    let x: await;
>x : await
}
=== tests/cases/conformance/parser/ecmascript2018/asyncGenerators/yieldAsTypeIsOk.ts ===
interface yield {}
async function * f20() {
>f20 : () => AsyncIterableIterator<any>

    let x: yield;
>x : yield
}
=== tests/cases/conformance/parser/ecmascript2018/asyncGenerators/yieldInNestedComputedPropertyIsOk.ts ===
async function * f21() {
>f21 : () => AsyncIterableIterator<any>

    const x = { [yield]: 1 };
>x : { [x: number]: number; }
>{ [yield]: 1 } : { [x: number]: number; }
>[yield] : number
>yield : any
>1 : 1
}

