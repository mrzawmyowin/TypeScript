=== tests/cases/conformance/types/negated/negatedInMappedTypeDisablesExcessProperties.ts ===
// https://github.com/Microsoft/TypeScript/issues/4196
// needs https://github.com/Microsoft/TypeScript/pull/26797 to work, as even though the mapped type can be
// written, the key type `string & ~("foo" | "bar")` can't be represented as properties or string/number index
// signatures

type Config = {
>Config : Symbol(Config, Decl(negatedInMappedTypeDisablesExcessProperties.ts, 0, 0))

    foo: number;
>foo : Symbol(foo, Decl(negatedInMappedTypeDisablesExcessProperties.ts, 5, 15))

    bar: number;
>bar : Symbol(bar, Decl(negatedInMappedTypeDisablesExcessProperties.ts, 6, 16))

} & {
    [k in (string & not ("foo" | "bar"))]: string;
>k : Symbol(k, Decl(negatedInMappedTypeDisablesExcessProperties.ts, 9, 5))

};

const conf: Config = {
>conf : Symbol(conf, Decl(negatedInMappedTypeDisablesExcessProperties.ts, 12, 5))
>Config : Symbol(Config, Decl(negatedInMappedTypeDisablesExcessProperties.ts, 0, 0))

    foo: 12,
>foo : Symbol(foo, Decl(negatedInMappedTypeDisablesExcessProperties.ts, 12, 22))

    bar: 12,
>bar : Symbol(bar, Decl(negatedInMappedTypeDisablesExcessProperties.ts, 13, 12))

    other: "string"
>other : Symbol(other, Decl(negatedInMappedTypeDisablesExcessProperties.ts, 14, 12))

}; // OK

const conf2: Config = {
>conf2 : Symbol(conf2, Decl(negatedInMappedTypeDisablesExcessProperties.ts, 18, 5))
>Config : Symbol(Config, Decl(negatedInMappedTypeDisablesExcessProperties.ts, 0, 0))

    foo: 12,
>foo : Symbol(foo, Decl(negatedInMappedTypeDisablesExcessProperties.ts, 18, 23))

    bar: 12,
>bar : Symbol(bar, Decl(negatedInMappedTypeDisablesExcessProperties.ts, 19, 12))

    other: 0,
>other : Symbol(other, Decl(negatedInMappedTypeDisablesExcessProperties.ts, 20, 12))

}; // Should error


