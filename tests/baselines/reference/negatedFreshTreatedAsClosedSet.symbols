=== tests/cases/conformance/types/negated/negatedFreshTreatedAsClosedSet.ts ===
// from https://github.com/Microsoft/TypeScript/issues/4183
type Distinct<A, B> = (A | B) & not (A & B);
>Distinct : Symbol(Distinct, Decl(negatedFreshTreatedAsClosedSet.ts, 0, 0))
>A : Symbol(A, Decl(negatedFreshTreatedAsClosedSet.ts, 1, 14))
>B : Symbol(B, Decl(negatedFreshTreatedAsClosedSet.ts, 1, 16))
>A : Symbol(A, Decl(negatedFreshTreatedAsClosedSet.ts, 1, 14))
>B : Symbol(B, Decl(negatedFreshTreatedAsClosedSet.ts, 1, 16))
>A : Symbol(A, Decl(negatedFreshTreatedAsClosedSet.ts, 1, 14))
>B : Symbol(B, Decl(negatedFreshTreatedAsClosedSet.ts, 1, 16))

declare var o1: {x};
>o1 : Symbol(o1, Decl(negatedFreshTreatedAsClosedSet.ts, 2, 11))
>x : Symbol(x, Decl(negatedFreshTreatedAsClosedSet.ts, 2, 17))

declare var o2: {y};
>o2 : Symbol(o2, Decl(negatedFreshTreatedAsClosedSet.ts, 3, 11))
>y : Symbol(y, Decl(negatedFreshTreatedAsClosedSet.ts, 3, 17))

declare function f1(x: Distinct<typeof o1, typeof o2>): void;
>f1 : Symbol(f1, Decl(negatedFreshTreatedAsClosedSet.ts, 3, 20))
>x : Symbol(x, Decl(negatedFreshTreatedAsClosedSet.ts, 5, 20))
>Distinct : Symbol(Distinct, Decl(negatedFreshTreatedAsClosedSet.ts, 0, 0))
>o1 : Symbol(o1, Decl(negatedFreshTreatedAsClosedSet.ts, 2, 11))
>o2 : Symbol(o2, Decl(negatedFreshTreatedAsClosedSet.ts, 3, 11))

f1({x: 0});         // OK
>f1 : Symbol(f1, Decl(negatedFreshTreatedAsClosedSet.ts, 3, 20))
>x : Symbol(x, Decl(negatedFreshTreatedAsClosedSet.ts, 7, 4))

f1({y: 0});         // OK
>f1 : Symbol(f1, Decl(negatedFreshTreatedAsClosedSet.ts, 3, 20))
>y : Symbol(y, Decl(negatedFreshTreatedAsClosedSet.ts, 8, 4))

f1({x: 0, y: 0});   // Should error
>f1 : Symbol(f1, Decl(negatedFreshTreatedAsClosedSet.ts, 3, 20))
>x : Symbol(x, Decl(negatedFreshTreatedAsClosedSet.ts, 9, 4))
>y : Symbol(y, Decl(negatedFreshTreatedAsClosedSet.ts, 9, 9))

